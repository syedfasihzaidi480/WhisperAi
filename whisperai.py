# -*- coding: utf-8 -*-
"""whisperai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E7COz1Ux_9bKHCg4dtHyS46NFsBBl-uF
"""

!pip install -U openai-whisper
!apt install ffmpeg
!pip install setuptools-rust streamlit sounddevice soundfile
!npm install -g localtunnel

import streamlit as st
import whisper
import tempfile
import os
import soundfile as sf
import numpy as np

# Disable Streamlit's authentication prompt
import os
os.environ["STREAMLIT_AUTH_ACTIVE"] = "false"

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import whisper
# import tempfile
# import os
# import sounddevice as sd
# import soundfile as sf
# import numpy as np
# 
# # Load the Whisper model
# @st.cache_resource
# def load_model():
#     return whisper.load_model("medium")
# 
# model = load_model()
# 
# def transcribe_audio(file_path):
#     result = model.transcribe(file_path)
#     return result["text"]
# 
# st.title("Whisper AI Transcription")
# 
# # Option to upload audio/video file
# uploaded_file = st.file_uploader("Upload an audio or video file", type=["mp3", "wav", "flac", "mp4", "m4a"])
# 
# # Option to record live audio
# if st.button("Record Live Audio"):
#     duration = st.slider("Recording duration (seconds)", min_value=1, max_value=10, value=5)
#     st.write(f"Recording for {duration} seconds...")
# 
#     fs = 44100  # Sample rate
#     recording = sd.rec(int(duration * fs), samplerate=fs, channels=1, dtype='float64')
#     sd.wait()  # Wait until the recording is finished
# 
#     # Save the recording to a temporary file
#     with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmpfile:
#         sf.write(tmpfile.name, recording, fs)
#         st.write("Recording saved. Transcribing...")
#         transcription = transcribe_audio(tmpfile.name)
# 
#         # Allow user to download the transcription
#         st.download_button(label="Download Transcription", data=transcription, file_name="transcription.txt", mime="text/plain")
# 
#         st.write("Transcription:")
#         st.write(transcription)
#         os.unlink(tmpfile.name)  # Delete the temporary file
# 
# # Handle uploaded file
# if uploaded_file is not None:
#     with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(uploaded_file.name)[1]) as tmpfile:
#         tmpfile.write(uploaded_file.getvalue())
#         st.write("File uploaded. Transcribing...")
#         transcription = transcribe_audio(tmpfile.name)
# 
#         # Allow user to download the transcription
#         st.download_button(label="Download Transcription", data=transcription, file_name="transcription.txt", mime="text/plain")
# 
#         st.write("Transcription:")
#         st.write(transcription)
#         os.unlink(tmpfile.name)  # Delete the temporary file
#

!streamlit run app.py & npx localtunnel --port 8501

